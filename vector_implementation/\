#include <iostream>

#include "vector.hpp"

template <typename T>
void vector<T>::push(T data)
{
	if (m_current == m_capacity)
	{
		T* temp = new T[2 * m_capacity];

		for ( int i = 0; i < m_capacity; ++i )
		{
			temp[i] = m_data[i];
		}

		delete[] m_data;
		m_capacity *= 2;
		m_data = temp;
	}
	
	m_data[m_current] = data;
	m_current++;
}

template <typename T>
void vector<T>::insert(T data, int index)
{
	if ( index == m_capacity )
	{
		push(data);
	}
	else 
	{
		m_data[index] = data;
	}
}

template <typename T>
void vector<T>::print()
{
	if (empty())
	{
		return;
	}

	for ( int i = 0; i < m_current; ++i )
	{
		std::cout << m_data[i] << " ";
	}
	std::cout << std::endl;
}

template <typename T>
T vector<T>::get(int index)
{
	if (index < m_current)
	return m_data[index];

	return 0;
}

template <typename T>
int vector<T>::size()
{
	if (empty())
	{
		return 0;
	}
	
	return m_current;
}

template <typename T>
void vector<T>::pop_back()
{
	if (empty())
	{
		return;
	}
	
	m_current--;
}

template <typename T>
int vector<T>::max_size()
{
	if (empty())
	{
		return 0;
	}

	return m_capacity;
}

template <typename T>
int vector<T>::begin()
{
	if (empty())
	{
		return 0;
	}

	return m_data[0];
}

template <typename T>
int vector<T>::end()
{
	if (empty())
	{
		return;
	}

	return m_data[m_current];
}

template <typename T>
void vector<T>::resize(int n)
{
	m_capacity = n;
}

template <typename T>
bool vector<T>::empty()
{
	return m_current == 0;
}
